#!/usr/bin/env python3
"""
Migrate existing projects to use repos/ directory.
"""

import os
import sys
import re

# Add parent directory to path
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from src.easybuild_bot.storage import Storage
from src.easybuild_bot.config import Settings

# Project root directory
PROJECT_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
REPOS_DIR = os.path.join(PROJECT_ROOT, "repos")


def clean_project_name(name: str) -> str:
    """Clean project name for use as directory name."""
    clean = re.sub(r'[^\w\s-]', '', name).strip().replace(' ', '_').lower()
    return clean


def migrate_projects():
    """Migrate all projects to use repos/ directory."""
    print("üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ –ø–∞–ø–∫—É repos/")
    print("=" * 60)
    
    # Load settings
    settings = Settings()
    
    # Initialize storage
    print(f"\nüì¶ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î: {settings.montydb_dir}/{settings.montydb_name}")
    storage = Storage(dir_path=settings.montydb_dir, db_name=settings.montydb_name)
    
    # Get all projects
    projects = storage.get_all_projects()
    
    if not projects:
        print("\n‚ö†Ô∏è  –ü—Ä–æ–µ–∫—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(projects)}")
    print()
    
    # Process each project
    updated_count = 0
    skipped_count = 0
    
    for project in projects:
        print(f"\nüì¶ –ü—Ä–æ–µ–∫—Ç: {project.name}")
        print(f"   ID: {project.id}")
        print(f"   –¢–µ–∫—É—â–∏–π –ø—É—Ç—å: {project.local_repo_path}")
        
        # Check if already in repos/ directory
        if project.local_repo_path.endswith(os.path.join("repos", clean_project_name(project.name))) or \
           "repos/" in project.local_repo_path or \
           "/repos/" in project.local_repo_path:
            print(f"   ‚úì –£–∂–µ –≤ –ø–∞–ø–∫–µ repos/, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            skipped_count += 1
            continue
        
        # Generate new path
        clean_name = clean_project_name(project.name)
        new_path = os.path.join(REPOS_DIR, clean_name)
        
        print(f"   ‚Üí –ù–æ–≤—ã–π –ø—É—Ç—å: {new_path}")
        
        # Update in database
        try:
            # Access the database directly
            projects_collection = storage.db["projects"]
            result = projects_collection.update_one(
                {"id": project.id},
                {"$set": {"local_repo_path": new_path}}
            )
            
            if result.modified_count > 0:
                print(f"   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –≤ –ë–î")
                updated_count += 1
                
                # Check if old repository exists and move it
                if os.path.exists(project.local_repo_path):
                    print(f"   üìÅ –ù–∞–π–¥–µ–Ω —Å—Ç–∞—Ä—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π")
                    
                    # Ask user if they want to move
                    response = input(f"   ‚ùì –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≤ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ? (y/n): ")
                    
                    if response.lower() == 'y':
                        # Create repos directory if it doesn't exist
                        os.makedirs(REPOS_DIR, exist_ok=True)
                        
                        # Move the repository
                        try:
                            import shutil
                            shutil.move(project.local_repo_path, new_path)
                            print(f"   ‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–µ—Ä–µ–º–µ—â—ë–Ω")
                        except Exception as e:
                            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è: {e}")
                            print(f"   üí° –í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤—Ä—É—á–Ω—É—é:")
                            print(f"      mv {project.local_repo_path} {new_path}")
                    else:
                        print(f"   ‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ. –ü—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –≤—ã–±–æ—Ä–µ –ø—Ä–æ–µ–∫—Ç–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –±—É–¥–µ—Ç –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω –∑–∞–Ω–æ–≤–æ")
                else:
                    print(f"   ‚ÑπÔ∏è  –°—Ç–∞—Ä—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω (–±—É–¥–µ—Ç –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω –∑–∞–Ω–æ–≤–æ)")
            else:
                print(f"   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≤ –ë–î")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
    
    # Summary
    print("\n" + "=" * 60)
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏:")
    print(f"   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count}")
    print(f"   ‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count}")
    print(f"   üìÅ –í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(projects)}")
    
    if updated_count > 0:
        print(f"\n‚ú® –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"   –í—Å–µ –Ω–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –±—É–¥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –≤: {REPOS_DIR}")
    else:
        print(f"\n‚úÖ –í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—É—Ç–∏")


if __name__ == "__main__":
    try:
        migrate_projects()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

