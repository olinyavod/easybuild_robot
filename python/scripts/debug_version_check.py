#!/usr/bin/env python3
"""
Debug script to check version detection for TechnouprApp.Client
"""
import os
import sys
import asyncio
import xml.etree.ElementTree as ET

# Add parent directory to path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))

async def main():
    """Check version detection."""
    from easybuild_bot.storage import Storage, REPOS_DIR
    from easybuild_bot.version_services import VersionServiceFactory
    
    # Initialize storage
    storage = Storage('/home/olinyavod/projects/easybuild_bot/data/monty', 'easybuild_bot')
    
    # Find TechnouprApp.Client project
    project = storage.get_project_by_name("TechnouprApp.Client")
    
    if not project:
        print("‚ùå –ü—Ä–æ–µ–∫—Ç 'TechnouprApp.Client' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã:")
        for p in storage.get_all_projects():
            print(f"  - {p.name}")
        return
    
    print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç –Ω–∞–π–¥–µ–Ω: {project.name}")
    print(f"\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ:")
    print(f"  ID: {project.id}")
    print(f"  –ò–º—è: {project.name}")
    print(f"  –¢–∏–ø: {project.project_type.value}")
    print(f"  Git URL: {project.git_url}")
    print(f"  –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å: {project.local_repo_path}")
    print(f"  –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ø—Ä–æ–µ–∫—Ç–∞: {project.project_file_path}")
    print(f"  –í–µ—Ç–∫–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: {project.dev_branch}")
    print(f"  –í–µ—Ç–∫–∞ —Ä–µ–ª–∏–∑–∞: {project.release_branch}")
    
    # Check if paths exist
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–µ–π:")
    if os.path.exists(project.local_repo_path):
        print(f"  ‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {project.local_repo_path}")
    else:
        print(f"  ‚ùå –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω: {project.local_repo_path}")
    
    # Check project file path
    full_project_file_path = os.path.join(project.local_repo_path, project.project_file_path)
    print(f"\n  –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ø—Ä–æ–µ–∫—Ç–∞: {full_project_file_path}")
    if os.path.exists(full_project_file_path):
        print(f"  ‚úÖ –§–∞–π–ª –ø—Ä–æ–µ–∫—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    else:
        print(f"  ‚ùå –§–∞–π–ª –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # Try to get version using version service
    version_service = VersionServiceFactory.create(project)
    if version_service:
        print(f"\n‚úÖ Version service —Å–æ–∑–¥–∞–Ω: {type(version_service).__name__}")
        
        # Try to get version
        print(f"\nüîé –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é...")
        try:
            version = await version_service.get_current_version(project)
            if version:
                print(f"  ‚úÖ –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞: {version}")
            else:
                print(f"  ‚ùå –í–µ—Ä—Å–∏—è –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ (get_current_version –≤–µ—Ä–Ω—É–ª None)")
                
                # Let's try to debug why
                print(f"\nüîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:")
                if os.path.exists(full_project_file_path):
                    try:
                        tree = ET.parse(full_project_file_path)
                        root = tree.getroot()
                        
                        print(f"  ‚úÖ XML —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω")
                        print(f"  –ö–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç: {root.tag}")
                        
                        # Try to find ApplicationDisplayVersion
                        found = False
                        for prop_group in root.findall('.//PropertyGroup'):
                            display_version_elem = prop_group.find('ApplicationDisplayVersion')
                            if display_version_elem is not None:
                                print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç ApplicationDisplayVersion")
                                print(f"     –ó–Ω–∞—á–µ–Ω–∏–µ: '{display_version_elem.text}'")
                                if display_version_elem.text:
                                    stripped = display_version_elem.text.strip()
                                    print(f"     –ü–æ—Å–ª–µ strip(): '{stripped}'")
                                else:
                                    print(f"     –≠–ª–µ–º–µ–Ω—Ç –ø—É—Å—Ç–æ–π (text is None –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞)")
                                found = True
                        
                        if not found:
                            print(f"  ‚ùå –≠–ª–µ–º–µ–Ω—Ç ApplicationDisplayVersion –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ")
                            print(f"\n  –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö PropertyGroup —ç–ª–µ–º–µ–Ω—Ç–æ–≤:")
                            for i, prop_group in enumerate(root.findall('.//PropertyGroup')):
                                print(f"    PropertyGroup {i+1}:")
                                for child in prop_group:
                                    print(f"      - {child.tag}: {child.text}")
                                    
                    except Exception as e:
                        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ XML: {e}")
                else:
                    print(f"  ‚ùå –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {full_project_file_path}")
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–µ—Ä—Å–∏–∏: {e}")
            import traceback
            traceback.print_exc()
    else:
        print(f"\n‚ùå Version service –Ω–µ —Å–æ–∑–¥–∞–Ω")

if __name__ == "__main__":
    asyncio.run(main())

