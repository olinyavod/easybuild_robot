"""
/add_project command implementation.
"""

import uuid
from typing import List, Optional
from ..base import Command, CommandContext, CommandResult
from ...models import Project, ProjectType


class AddProjectCommand(Command):
    """Add project command - add a new project (admin only)."""
    
    def get_command_name(self) -> str:
        return "/add_project"
    
    def get_semantic_tags(self) -> List[str]:
        return [
            "–¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç",
            "—Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç",
            "–Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç",
            "–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"
        ]
    
    async def can_execute(self, ctx: CommandContext) -> tuple[bool, Optional[str]]:
        """Check if user has admin access."""
        return await self._check_user_access(ctx.update, require_admin=True)
    
    async def execute(self, ctx: CommandContext) -> CommandResult:
        """Execute add project command."""
        # Parse command arguments
        # Format: /add_project <name> <type> <git_url> <project_file_path> <local_repo_path> [dev_branch] [release_branch]
        
        if not ctx.context.args or len(ctx.context.args) < 5:
            usage_msg = (
                "üìù *–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /add\\_project:*\n\n"
                "/add\\_project \\[–Ω–∞–∑–≤–∞–Ω–∏–µ\\] \\[—Ç–∏–ø\\] \\[git\\_url\\] \\[–ø—É—Ç—å\\] \\[–ª–æ–∫–∞–ª—å–Ω—ã–π\\_–ø—É—Ç—å\\] \\[dev\\_–≤–µ—Ç–∫–∞\\] \\[release\\_–≤–µ—Ç–∫–∞\\]\n\n"
                "*–¢–∏–ø—ã –ø—Ä–æ–µ–∫—Ç–æ–≤:*\n"
                "‚Ä¢ `flutter` \\- Flutter –ø—Ä–æ–µ–∫—Ç\n"
                "‚Ä¢ `dotnet_maui` \\- \\.NET MAUI –ø—Ä–æ–µ–∫—Ç\n"
                "‚Ä¢ `xamarin` \\- Xamarin –ø—Ä–æ–µ–∫—Ç\n\n"
                "*–ü—Ä–∏–º–µ—Ä:*\n"
                "`/add_project MyApp flutter https://github.com/user/myapp.git android/app /home/repos/myapp develop main`\n\n"
                "–ï—Å–ª–∏ –≤–µ—Ç–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: `develop` –∏ `main`"
            )
            await ctx.update.effective_message.reply_text(usage_msg, parse_mode="MarkdownV2")
            return CommandResult(success=False, error="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        
        name = ctx.context.args[0]
        project_type_str = ctx.context.args[1].lower()
        git_url = ctx.context.args[2]
        project_file_path = ctx.context.args[3]
        local_repo_path = ctx.context.args[4]
        dev_branch = ctx.context.args[5] if len(ctx.context.args) > 5 else "develop"
        release_branch = ctx.context.args[6] if len(ctx.context.args) > 6 else "main"
        
        # Validate project type
        try:
            if project_type_str == "flutter":
                project_type = ProjectType.FLUTTER
            elif project_type_str in ("dotnet_maui", "maui"):
                project_type = ProjectType.DOTNET_MAUI
            elif project_type_str == "xamarin":
                project_type = ProjectType.XAMARIN
            else:
                error_msg = (
                    f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞: `{project_type_str}`\n\n"
                    "–î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ç–∏–ø—ã: `flutter`, `dotnet_maui` \\(–∏–ª–∏ `maui`\\), `xamarin`"
                )
                await ctx.update.effective_message.reply_text(error_msg, parse_mode="MarkdownV2")
                return CommandResult(success=False, error=f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞: {project_type_str}")
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Ç–∏–ø–∞ –ø—Ä–æ–µ–∫—Ç–∞: {str(e)}"
            await ctx.update.effective_message.reply_text(error_msg)
            return CommandResult(success=False, error=str(e))
        
        # Check if project with this name already exists
        existing = self.storage.get_project_by_name(name)
        if existing:
            error_msg = f"‚ùå –ü—Ä–æ–µ–∫—Ç —Å –∏–º–µ–Ω–µ–º `{name}` —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\\!"
            await ctx.update.effective_message.reply_text(error_msg, parse_mode="MarkdownV2")
            return CommandResult(success=False, error=f"–ü—Ä–æ–µ–∫—Ç {name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # Create new project
        project = Project(
            id=str(uuid.uuid4()),
            name=name,
            project_type=project_type,
            git_url=git_url,
            project_file_path=project_file_path,
            local_repo_path=local_repo_path,
            dev_branch=dev_branch,
            release_branch=release_branch,
            allowed_group_ids=[],  # Empty means available for all groups
            tags=[],
            description=None
        )
        
        # Save to database
        self.storage.add_project(project)
        
        # Build success message
        type_emoji = {
            ProjectType.FLUTTER: "ü¶ã",
            ProjectType.DOTNET_MAUI: "üî∑",
            ProjectType.XAMARIN: "üî∂"
        }.get(project_type, "üì¶")
        
        # Escape special characters for MarkdownV2
        def escape_md(text):
            special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
            for char in special_chars:
                text = text.replace(char, f'\\{char}')
            return text
        
        success_msg = (
            f"‚úÖ *–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω\\!*\n\n"
            f"{type_emoji} *–ù–∞–∑–≤–∞–Ω–∏–µ:* {escape_md(name)}\n"
            f"üì¶ *–¢–∏–ø:* {escape_md(project_type.value.replace('_', ' ').title())}\n"
            f"üîó *Git URL:* `{escape_md(git_url)}`\n"
            f"üìÅ *–§–∞–π–ª –ø—Ä–æ–µ–∫—Ç–∞:* `{escape_md(project_file_path)}`\n"
            f"üíæ *–õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å:* `{escape_md(local_repo_path)}`\n"
            f"üåø *–í–µ—Ç–∫–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:* `{escape_md(dev_branch)}`\n"
            f"üöÄ *–í–µ—Ç–∫–∞ —Ä–µ–ª–∏–∑–∞:* `{escape_md(release_branch)}`\n"
            f"üÜî *ID:* `{escape_md(project.id)}`\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/edit\\_project {escape_md(name)}` –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞\\."
        )
        
        await ctx.update.effective_message.reply_text(success_msg, parse_mode="MarkdownV2")
        
        return CommandResult(success=True, message=f"–ü—Ä–æ–µ–∫—Ç {name} —Å–æ–∑–¥–∞–Ω")

