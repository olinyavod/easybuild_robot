"""
/block_user command implementation.
"""

from typing import List, Optional, Dict
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from ..base import Command, CommandContext, CommandResult


class BlockUserCommand(Command):
    """Block user command - block user by name (admin only)."""
    
    def get_command_name(self) -> str:
        return "/block_user"
    
    def get_semantic_tags(self) -> List[str]:
        return [
            "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å",
            "–æ—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            "–∑–∞–ø—Ä–µ—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø",
            "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —é–∑–µ—Ä–∞"
        ]
    
    def get_parameter_patterns(self) -> Dict[str, List[str]]:
        return {
            "user_name": [
                # With "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" (any ending) or "—é–∑–µ—Ä" (any ending) specified
                r"(?:–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å|–æ—Ç–∫–ª—é—á–∏—Ç—å|–∑–∞–ø—Ä–µ—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø|–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å)\s+(?:–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª(?:—å|—è|—é|–µ–º|–∏|–µ)|—é–∑–µ—Ä(?:–∞|—É|–æ–º|–µ)?)\s+([–ê-–Ø–∞-—è–Å—ëA-Za-z0-9\s]+?)(?:\s*$|[.,!?])",
                # Without "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" - name directly after verb
                r"(?:–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å|–æ—Ç–∫–ª—é—á–∏—Ç—å|–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å)\s+([–ê-–Ø–∞-—è–Å—ëA-Za-z0-9\s]+?)(?:\s*$|[.,!?])",
                # "–∑–∞–ø—Ä–µ—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø" + name (without "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                r"–∑–∞–ø—Ä–µ—Ç–∏—Ç—å\s+–¥–æ—Å—Ç—É–ø\s+([–ê-–Ø–∞-—è–Å—ëA-Za-z0-9\s]+?)(?:\s*$|[.,!?])",
                # Reverse order: name + verb
                r"([–ê-–Ø–∞-—è–Å—ëA-Za-z0-9\s]+?)\s+(?:–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å|–æ—Ç–∫–ª—é—á–∏—Ç—å|–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å)"
            ]
        }
    
    async def can_execute(self, ctx: CommandContext) -> tuple[bool, Optional[str]]:
        """Check if user has admin access."""
        return await self._check_user_access(ctx.update, require_admin=True)
    
    async def execute(self, ctx: CommandContext) -> CommandResult:
        """Execute block user command."""
        # Get user_name from params
        user_name = ctx.params.get("user_name")
        if not user_name:
            message = (
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <–ò–º—è>'"
            )
            await ctx.update.effective_message.reply_text(message)
            return CommandResult(success=False, error=message)
        
        # Search for users by display name
        found_users = self.storage.find_users_by_display_name(user_name)
        
        if not found_users:
            message = f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏–º–µ–Ω–µ–º '{user_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ."
            await ctx.update.effective_message.reply_text(message)
            return CommandResult(success=False, error=message)
        
        if len(found_users) == 1:
            # Only one user found - block directly
            user = found_users[0]
            if not user.allowed:
                message = f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.display_name or user.user_name} —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."
                await ctx.update.effective_message.reply_text(message)
            else:
                self.storage.update_user_allowed(user.user_id, False)
                message = f"üîí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.display_name or user.user_name} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!"
                await ctx.update.effective_message.reply_text(message)
            
            return CommandResult(success=True, message=message)
        else:
            # Multiple users found - show selection keyboard
            keyboard = []
            for u in found_users:
                status = "üîì" if u.allowed else "üîí"
                button_text = f"{status} {u.display_name or u.user_name}"
                keyboard.append([InlineKeyboardButton(button_text, callback_data=f"block_{u.user_id}")])
            
            message = (
                f"–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏–º–µ–Ω–µ–º '{user_name}'.\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:"
            )
            await ctx.update.effective_message.reply_text(
                message,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
            return CommandResult(success=True, message=message)

