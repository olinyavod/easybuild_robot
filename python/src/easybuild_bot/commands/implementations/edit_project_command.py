"""
/edit_project command implementation.
"""

from typing import List, Optional, Dict
from ..base import Command, CommandContext, CommandResult


class EditProjectCommand(Command):
    """Edit project command - edit project settings (admin only)."""
    
    def get_command_name(self) -> str:
        return "/edit_project"
    
    def get_semantic_tags(self) -> List[str]:
        return [
            "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç",
            "–∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–µ–∫—Ç",
            "–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–µ–∫—Ç",
            "–æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç"
        ]
    
    def get_parameter_patterns(self) -> Dict[str, List[str]]:
        """Get regex patterns for parameter extraction from voice commands."""
        return {
            "project_name": [
                r"(?:—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å|–∏–∑–º–µ–Ω–∏—Ç—å|–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å|–æ–±–Ω–æ–≤–∏—Ç—å)\s+–ø—Ä–æ–µ–∫—Ç\s+([–ê-–Ø–∞-—è–Å—ëA-Za-z0-9_\-]+)",
                r"–ø—Ä–æ–µ–∫—Ç\s+([–ê-–Ø–∞-—è–Å—ëA-Za-z0-9_\-]+)",
            ]
        }
    
    async def can_execute(self, ctx: CommandContext) -> tuple[bool, Optional[str]]:
        """Check if user has admin access."""
        return await self._check_user_access(ctx.update, require_admin=True)
    
    async def execute(self, ctx: CommandContext) -> CommandResult:
        """Execute edit project command."""
        # Parse command arguments
        # For voice commands, check params first
        # For text commands, use context.args
        
        # Try to get arguments from context.args (for /edit_project command)
        if ctx.context.args and len(ctx.context.args) >= 2:
            name = ctx.context.args[0]
            field = ctx.context.args[1].lower()
            value = " ".join(ctx.context.args[2:]) if len(ctx.context.args) > 2 else ""
        # Try to get from params (for voice commands)
        elif ctx.params.get("project_name"):
            name = ctx.params.get("project_name")
            # For voice commands, show interactive menu (not implemented yet)
            error_msg = (
                "‚ùå –ì–æ–ª–æ—Å–æ–≤–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                "/edit_project <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–ø–æ–ª–µ> <–∑–Ω–∞—á–µ–Ω–∏–µ>\n\n"
                f"–ù–∞–π–¥–µ–Ω –ø—Ä–æ–µ–∫—Ç: {name}\n\n"
                "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –º–∞—Å—Ç–µ—Ä: /edit_project_wizard"
            )
            await ctx.update.effective_message.reply_text(error_msg)
            return CommandResult(success=False, error="–ì–æ–ª–æ—Å–æ–≤–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
        else:
            usage_msg = (
                "üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /edit_project:\n\n"
                "/edit_project <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–ø–æ–ª–µ> <–∑–Ω–∞—á–µ–Ω–∏–µ>\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è:\n"
                "‚Ä¢ name - –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞\n"
                "‚Ä¢ description - –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞\n"
                "‚Ä¢ dev_branch - –≤–µ—Ç–∫–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏\n"
                "‚Ä¢ release_branch - –≤–µ—Ç–∫–∞ —Ä–µ–ª–∏–∑–∞\n"
                "‚Ä¢ tags - —Ç–µ–≥–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)\n"
                "‚Ä¢ groups - ID –≥—Ä—É–ø–ø (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –ø—É—Å—Ç–æ = –≤—Å–µ –≥—Ä—É–ø–ø—ã)\n"
                "‚Ä¢ git_url - —Å—Å—ã–ª–∫–∞ –Ω–∞ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π\n"
                "‚Ä¢ project_file_path - –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ø—Ä–æ–µ–∫—Ç–∞\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "/edit_project MyApp name NewAppName\n"
                "/edit_project MyApp description –ú–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è Android\n"
                "/edit_project MyApp tags mobile,android,prod\n"
                "/edit_project MyApp groups -1001234567890,-1009876543210\n"
                "/edit_project MyApp dev_branch feature/new-ui\n\n"
                "‚ÑπÔ∏è –î–ª—è —É–¥–æ–±–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /edit_project_wizard"
            )
            await ctx.update.effective_message.reply_text(usage_msg)
            return CommandResult(success=False, error="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        
        # Get project
        project = self.storage.get_project_by_name(name)
        if not project:
            error_msg = f"‚ùå –ü—Ä–æ–µ–∫—Ç {name} –Ω–µ –Ω–∞–π–¥–µ–Ω!"
            await ctx.update.effective_message.reply_text(error_msg)
            return CommandResult(success=False, error=f"–ü—Ä–æ–µ–∫—Ç {name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # Update field
        try:
            if field == "name":
                # Validate that name is not empty
                if not value or not value.strip():
                    error_msg = "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!"
                    await ctx.update.effective_message.reply_text(error_msg)
                    return CommandResult(success=False, error="–ü—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞")
                
                # Check if name already exists (excluding current project)
                existing_project = self.storage.get_project_by_name(value)
                if existing_project and existing_project.id != project.id:
                    error_msg = f"‚ùå –ü—Ä–æ–µ–∫—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{value}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ."
                    await ctx.update.effective_message.reply_text(error_msg)
                    return CommandResult(success=False, error=f"–ü—Ä–æ–µ–∫—Ç {value} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                
                project.name = value.strip()
            elif field == "description":
                project.description = value if value else None
            elif field == "dev_branch":
                project.dev_branch = value
            elif field == "release_branch":
                project.release_branch = value
            elif field == "tags":
                # Parse comma-separated tags
                project.tags = [tag.strip() for tag in value.split(",") if tag.strip()]
            elif field == "groups":
                # Parse comma-separated group IDs
                if value.strip():
                    try:
                        project.allowed_group_ids = [int(gid.strip()) for gid in value.split(",") if gid.strip()]
                    except ValueError:
                        error_msg = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –≥—Ä—É–ø–ø. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é."
                        await ctx.update.effective_message.reply_text(error_msg)
                        return CommandResult(success=False, error="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –≥—Ä—É–ø–ø")
                else:
                    # Empty value means all groups
                    project.allowed_group_ids = []
            elif field == "git_url":
                project.git_url = value
            elif field == "project_file_path":
                project.project_file_path = value
            elif field == "local_repo_path":
                # This is a system-managed field, but we allow it for backward compatibility
                error_msg = (
                    "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: local_repo_path - —Å–ª—É–∂–µ–±–Ω–æ–µ –ø–æ–ª–µ, —É–ø—Ä–∞–≤–ª—è–µ–º–æ–µ —Å–∏—Å—Ç–µ–º–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n\n"
                    "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –ø–æ–ª—è –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ø—Ä–æ–±–ª–µ–º–∞–º —Å —Ä–∞–±–æ—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã. "
                    "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥—Ä—É–≥–∏–µ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞."
                )
                await ctx.update.effective_message.reply_text(error_msg)
                return CommandResult(success=False, error="local_repo_path - —Å–ª—É–∂–µ–±–Ω–æ–µ –ø–æ–ª–µ")
            else:
                error_msg = (
                    f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ: {field}\n\n"
                    "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è: name, description, dev_branch, release_branch, tags, groups, "
                    "git_url, project_file_path\n\n"
                    "‚ÑπÔ∏è –ü–æ–ª–µ local_repo_path —è–≤–ª—è–µ—Ç—Å—è —Å–ª—É–∂–µ–±–Ω—ã–º –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
                )
                await ctx.update.effective_message.reply_text(error_msg)
                return CommandResult(success=False, error=f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ: {field}")
            
            # Save changes
            self.storage.add_project(project)
            
            # Build success message
            success_msg = (
                f"‚úÖ –ü—Ä–æ–µ–∫—Ç '{name}' –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n"
                f"–ü–æ–ª–µ: {field}\n"
                f"–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:\n"
            )
            
            if field == "tags":
                success_msg += f"{', '.join(project.tags) if project.tags else '–Ω–µ—Ç —Ç–µ–≥–æ–≤'}"
            elif field == "groups":
                if project.allowed_group_ids:
                    success_msg += f"{', '.join(str(gid) for gid in project.allowed_group_ids)}"
                else:
                    success_msg += "–≤—Å–µ –≥—Ä—É–ø–ø—ã"
            else:
                success_msg += f"{value if value else '–ø—É—Å—Ç–æ'}"
            
            await ctx.update.effective_message.reply_text(success_msg)
            
            return CommandResult(success=True, message=f"–ü—Ä–æ–µ–∫—Ç {name} –æ–±–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞: {str(e)}"
            await ctx.update.effective_message.reply_text(error_msg)
            return CommandResult(success=False, error=str(e))

