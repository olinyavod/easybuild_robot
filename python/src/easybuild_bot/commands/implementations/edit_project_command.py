"""
/edit_project command implementation.
"""

from typing import List, Optional
from ..base import Command, CommandContext, CommandResult


class EditProjectCommand(Command):
    """Edit project command - edit project settings (admin only)."""
    
    def get_command_name(self) -> str:
        return "/edit_project"
    
    def get_semantic_tags(self) -> List[str]:
        return [
            "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç",
            "–∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–µ–∫—Ç",
            "–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–µ–∫—Ç",
            "–æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç"
        ]
    
    async def can_execute(self, ctx: CommandContext) -> tuple[bool, Optional[str]]:
        """Check if user has admin access."""
        return await self._check_user_access(ctx.update, require_admin=True)
    
    async def execute(self, ctx: CommandContext) -> CommandResult:
        """Execute edit project command."""
        # Parse command arguments
        # Format: /edit_project <name> <field> <value>
        
        if not ctx.context.args or len(ctx.context.args) < 2:
            usage_msg = (
                "üìù **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /edit_project:**\n\n"
                "```\n"
                "/edit_project <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–ø–æ–ª–µ> <–∑–Ω–∞—á–µ–Ω–∏–µ>\n"
                "```\n\n"
                "**–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è:**\n"
                "‚Ä¢ `description` - –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞\n"
                "‚Ä¢ `dev_branch` - –≤–µ—Ç–∫–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏\n"
                "‚Ä¢ `release_branch` - –≤–µ—Ç–∫–∞ —Ä–µ–ª–∏–∑–∞\n"
                "‚Ä¢ `tags` - —Ç–µ–≥–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)\n"
                "‚Ä¢ `groups` - ID –≥—Ä—É–ø–ø (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –ø—É—Å—Ç–æ = –≤—Å–µ –≥—Ä—É–ø–ø—ã)\n"
                "‚Ä¢ `git_url` - —Å—Å—ã–ª–∫–∞ –Ω–∞ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π\n"
                "‚Ä¢ `project_file_path` - –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ø—Ä–æ–µ–∫—Ç–∞\n"
                "‚Ä¢ `local_repo_path` - –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é\n\n"
                "**–ü—Ä–∏–º–µ—Ä—ã:**\n"
                "```\n"
                "/edit_project MyApp description –ú–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è Android\n"
                "/edit_project MyApp tags mobile,android,prod\n"
                "/edit_project MyApp groups -1001234567890,-1009876543210\n"
                "/edit_project MyApp dev_branch feature/new-ui\n"
                "/edit_project MyApp groups  # –æ—á–∏—Å—Ç–∏—Ç—å –≥—Ä—É–ø–ø—ã (–¥–æ—Å—Ç—É–ø –¥–ª—è –≤—Å–µ—Ö)\n"
                "```"
            )
            await ctx.update.effective_message.reply_text(usage_msg, parse_mode="Markdown")
            return CommandResult(success=False, error="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        
        name = ctx.context.args[0]
        field = ctx.context.args[1].lower()
        value = " ".join(ctx.context.args[2:]) if len(ctx.context.args) > 2 else ""
        
        # Get project
        project = self.storage.get_project_by_name(name)
        if not project:
            error_msg = f"‚ùå –ü—Ä–æ–µ–∫—Ç `{name}` –Ω–µ –Ω–∞–π–¥–µ–Ω!"
            await ctx.update.effective_message.reply_text(error_msg, parse_mode="Markdown")
            return CommandResult(success=False, error=f"–ü—Ä–æ–µ–∫—Ç {name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # Update field
        try:
            if field == "description":
                project.description = value if value else None
            elif field == "dev_branch":
                project.dev_branch = value
            elif field == "release_branch":
                project.release_branch = value
            elif field == "tags":
                # Parse comma-separated tags
                project.tags = [tag.strip() for tag in value.split(",") if tag.strip()]
            elif field == "groups":
                # Parse comma-separated group IDs
                if value.strip():
                    try:
                        project.allowed_group_ids = [int(gid.strip()) for gid in value.split(",") if gid.strip()]
                    except ValueError:
                        error_msg = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –≥—Ä—É–ø–ø. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é."
                        await ctx.update.effective_message.reply_text(error_msg)
                        return CommandResult(success=False, error="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –≥—Ä—É–ø–ø")
                else:
                    # Empty value means all groups
                    project.allowed_group_ids = []
            elif field == "git_url":
                project.git_url = value
            elif field == "project_file_path":
                project.project_file_path = value
            elif field == "local_repo_path":
                project.local_repo_path = value
            else:
                error_msg = (
                    f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ: `{field}`\n\n"
                    "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è: `description`, `dev_branch`, `release_branch`, `tags`, `groups`, "
                    "`git_url`, `project_file_path`, `local_repo_path`"
                )
                await ctx.update.effective_message.reply_text(error_msg, parse_mode="Markdown")
                return CommandResult(success=False, error=f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ: {field}")
            
            # Save changes
            self.storage.add_project(project)
            
            # Build success message
            success_msg = (
                f"‚úÖ **–ü—Ä–æ–µ–∫—Ç `{name}` –æ–±–Ω–æ–≤–ª–µ–Ω!**\n\n"
                f"**–ü–æ–ª–µ:** `{field}`\n"
                f"**–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:**\n"
            )
            
            if field == "tags":
                success_msg += f"`{', '.join(project.tags) if project.tags else '–Ω–µ—Ç —Ç–µ–≥–æ–≤'}`"
            elif field == "groups":
                if project.allowed_group_ids:
                    success_msg += f"`{', '.join(str(gid) for gid in project.allowed_group_ids)}`"
                else:
                    success_msg += "`–≤—Å–µ –≥—Ä—É–ø–ø—ã`"
            else:
                success_msg += f"`{value if value else '–ø—É—Å—Ç–æ'}`"
            
            await ctx.update.effective_message.reply_text(success_msg, parse_mode="Markdown")
            
            return CommandResult(success=True, message=f"–ü—Ä–æ–µ–∫—Ç {name} –æ–±–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞: {str(e)}"
            await ctx.update.effective_message.reply_text(error_msg)
            return CommandResult(success=False, error=str(e))

