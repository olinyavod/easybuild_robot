"""
/delete_project command implementation.
"""

from typing import List, Optional
from ..base import Command, CommandContext, CommandResult


class DeleteProjectCommand(Command):
    """Delete project command - delete a project (admin only)."""
    
    def get_command_name(self) -> str:
        return "/delete_project"
    
    def get_semantic_tags(self) -> List[str]:
        return [
            "—É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç",
            "—É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞",
            "—Å—Ç–µ—Ä–µ—Ç—å –ø—Ä–æ–µ–∫—Ç",
            "—É–±—Ä–∞—Ç—å –ø—Ä–æ–µ–∫—Ç"
        ]
    
    async def can_execute(self, ctx: CommandContext) -> tuple[bool, Optional[str]]:
        """Check if user has admin access."""
        return await self._check_user_access(ctx.update, require_admin=True)
    
    async def execute(self, ctx: CommandContext) -> CommandResult:
        """Execute delete project command."""
        # Parse command arguments
        # Format: /delete_project <name>
        
        if not ctx.context.args or len(ctx.context.args) < 1:
            usage_msg = (
                "üìù **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /delete_project:**\n\n"
                "```\n"
                "/delete_project <–Ω–∞–∑–≤–∞–Ω–∏–µ>\n"
                "```\n\n"
                "**–ü—Ä–∏–º–µ—Ä:**\n"
                "```\n"
                "/delete_project MyApp\n"
                "```\n\n"
                "‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!"
            )
            await ctx.update.effective_message.reply_text(usage_msg, parse_mode="Markdown")
            return CommandResult(success=False, error="–ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞")
        
        name = " ".join(ctx.context.args)
        
        # Get project
        project = self.storage.get_project_by_name(name)
        if not project:
            error_msg = f"‚ùå –ü—Ä–æ–µ–∫—Ç `{name}` –Ω–µ –Ω–∞–π–¥–µ–Ω!"
            await ctx.update.effective_message.reply_text(error_msg, parse_mode="Markdown")
            return CommandResult(success=False, error=f"–ü—Ä–æ–µ–∫—Ç {name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # Delete project
        success = self.storage.delete_project(project.id)
        
        if success:
            success_msg = (
                f"üóëÔ∏è **–ü—Ä–æ–µ–∫—Ç `{name}` —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!**\n\n"
                f"**–¢–∏–ø:** {project.project_type.value.replace('_', ' ').title()}\n"
                f"**Git URL:** `{project.git_url}`\n"
                f"**ID:** `{project.id}`"
            )
            await ctx.update.effective_message.reply_text(success_msg, parse_mode="Markdown")
            return CommandResult(success=True, message=f"–ü—Ä–æ–µ–∫—Ç {name} —É–¥–∞–ª–µ–Ω")
        else:
            error_msg = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç `{name}`!"
            await ctx.update.effective_message.reply_text(error_msg, parse_mode="Markdown")
            return CommandResult(success=False, error=f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç {name}")

