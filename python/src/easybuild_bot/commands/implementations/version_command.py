"""
Command for setting release version (version <value>).
"""

import re
from typing import List, Optional
from ..base import Command, CommandContext, CommandResult
from ...builders import ProjectBuilderFactory


class VersionCommand(Command):
    """Version command - set release version for project."""
    
    def get_command_name(self) -> str:
        return "/version"
    
    def get_semantic_tags(self) -> List[str]:
        return [
            "version",
            "–≤–µ—Ä—Å–∏—è",
            "–≤–µ—Ä—Å–∏—é",
            "—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ—Ä—Å–∏—é",
        ]
    
    def get_parameter_patterns(self) -> dict:
        """Pattern to match version number."""
        return {
            "version": [
                r"version\s+([0-9]+\.[0-9]+\.[0-9]+(?:\+[0-9]+)?)",
                r"–≤–µ—Ä—Å–∏—è\s+([0-9]+\.[0-9]+\.[0-9]+(?:\+[0-9]+)?)",
            ]
        }
    
    async def can_execute(self, ctx: CommandContext) -> tuple[bool, Optional[str]]:
        """Check if user has access."""
        return await self._check_user_access(ctx.update, require_admin=False)
    
    async def execute(self, ctx: CommandContext) -> CommandResult:
        """Execute version command."""
        version = ctx.params.get("version")
        
        if not version:
            message = (
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `version <–Ω–æ–º–µ—Ä>`\n"
                "–ü—Ä–∏–º–µ—Ä: `version 1.2.3+45`"
            )
            await ctx.update.effective_message.reply_text(
                message,
                parse_mode='Markdown'
            )
            return CommandResult(success=False, error="Missing version parameter")
        
        # For now, just show confirmation - real implementation would need project context
        await ctx.update.effective_message.reply_text(
            f"‚úÖ –í–µ—Ä—Å–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞: {version}\n\n"
            f"–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ä–µ–ª–∏–∑–∞.\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üì¶ –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ä–µ–ª–∏–∑' –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞."
        )
        
        return CommandResult(success=True, message=f"Version recognized: {version}")




