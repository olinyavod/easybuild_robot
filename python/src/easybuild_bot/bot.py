import os
import logging
from dotenv import load_dotenv
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, BotCommand, BotCommandScopeAllPrivateChats, BotCommandScopeAllGroupChats, BotCommandScopeDefault
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, ConversationHandler, MessageHandler, filters
from .storage import init_db, add_user, get_user_by_user_id, get_all_users, update_user_allowed, get_all_groups, add_group, get_group_by_group_id, update_user_admin
from .models import BotUser, BotGroup
from .command_matcher import get_command_matcher

logger = logging.getLogger(__name__)

ADMIN_WAIT_TOKEN = 1

async def request_access(update: Update, context: ContextTypes.DEFAULT_TYPE, is_replay: bool = True) -> bool:
    user = update.effective_user
    if not user:
        return False

    existing = get_user_by_user_id(user.id)
    if existing is None:
        add_user(BotUser(id=str(user.id), user_id=user.id, user_name=user.username or '', display_name=user.full_name))
        existing = get_user_by_user_id(user.id)

    if existing and existing.is_admin:
        return True

    if not existing or not existing.allowed:
        if is_replay:
            await update.effective_message.reply_text("–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return False

    return True

async def request_admin_access(update: Update, context: ContextTypes.DEFAULT_TYPE, is_replay: bool = True) -> bool:
    user = update.effective_user
    if not user:
        return False
    existing = get_user_by_user_id(user.id)
    if existing and existing.is_admin:
        return True
    if is_replay:
        await update.effective_message.reply_text("–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    return False

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await request_access(update, context):
        return
    user = update.effective_user
    await update.effective_message.reply_text(f"–ü—Ä–∏–≤–µ—Ç, {user.full_name}!")

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await request_access(update, context):
        return
    await update.effective_message.reply_text("Help")

async def cmd_build(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await request_access(update, context):
        return
    keyboard = [
        [InlineKeyboardButton("–°–±–æ—Ä–∫–∞ APK Autolab - Checklist –¥–ª—è Prod-—Å—Ä–µ–¥—ã", callback_data="build_apk_checklist_prod")],
        [InlineKeyboardButton("–°–±–æ—Ä–∫–∞ APK Autolab - Checklist –¥–ª—è Dev-—Å—Ä–µ–¥—ã", callback_data="build_apk_checklist_dev")],
        [InlineKeyboardButton("–°–±–æ—Ä–∫–∞ APK TehnouprApp - –ö–ª–∏–µ–Ω—Ç –¥–ª—è Prod-—Å—Ä–µ–¥—ã", callback_data="build_apk_tehnoupr_client_prod")],
        [InlineKeyboardButton("–°–±–æ—Ä–∫–∞ APK TehnouprApp - –ö–ª–∏–µ–Ω—Ç –¥–ª—è Dev-—Å—Ä–µ–¥—ã", callback_data="build_apk_tehnoupr_client_dev")],
        [InlineKeyboardButton("–°–±–æ—Ä–∫–∞ APK TehnouprApp - –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –¥–ª—è Prod-—Å—Ä–µ–¥—ã", callback_data="build_apk_tehnoupr_employee_prod")],
        [InlineKeyboardButton("–°–±–æ—Ä–∫–∞ APK TehnouprApp - –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –¥–ª—è Dev-—Å—Ä–µ–¥—ã", callback_data="build_apk_tehnoupr_employee_dev")],
    ]
    await update.effective_message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–±–æ—Ä–∫—É:", reply_markup=InlineKeyboardMarkup(keyboard))

async def cmd_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await request_admin_access(update, context):
        return
    users = get_all_users()
    not_allowed = [u for u in users if not u.allowed]
    if not not_allowed:
        await update.effective_message.reply_text("–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø.")
        return
    keyboard = [[InlineKeyboardButton(u.display_name or f"User {u.user_id}", callback_data=f"allow_user_{u.user_id}")] for u in not_allowed]
    await update.effective_message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞:\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø:", reply_markup=InlineKeyboardMarkup(keyboard))

async def cb_allow_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query or not query.data:
        return
    if not await request_admin_access(update, context, is_replay=False):
        await query.answer(text="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=False)
        return
    if not query.data.startswith("allow_user_"):
        return
    user_id = int(query.data.split("_")[-1])
    existing = get_user_by_user_id(user_id)
    if not existing:
        await query.answer(text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=False)
        return
    update_user_allowed(user_id, True)
    await query.answer(text="–î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω ‚úÖ", show_alert=False)
    users = get_all_users()
    not_allowed = [u for u in users if not u.allowed]
    if not not_allowed:
        await query.edit_message_text("–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø.")
    else:
        keyboard = [[InlineKeyboardButton(u.display_name or f"User {u.user_id}", callback_data=f"allow_user_{u.user_id}")] for u in not_allowed]
        await query.edit_message_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞:\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø:", reply_markup=InlineKeyboardMarkup(keyboard))

async def cmd_groups(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await request_admin_access(update, context):
        return
    groups = get_all_groups()
    if not groups:
        await update.effective_message.reply_text("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø.")
        return
    lines = ["üìã –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã:\n"]
    for i, g in enumerate(groups, start=1):
        lines.append(f"{i}. {g.group_name}")
        lines.append(f"   ID: {g.group_id}\n")
    await update.effective_message.reply_text("\n".join(lines))

async def cmd_register_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await request_access(update, context):
        return
    chat = update.effective_chat
    if not chat:
        await update.effective_message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ.")
        return
    group_id = chat.id
    group_title = chat.title
    if group_title is None or group_id > 0:
        await update.effective_message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
        return
    existing = get_group_by_group_id(group_id)
    if existing:
        await update.effective_message.reply_text(f"–≠—Ç–∞ –≥—Ä—É–ø–ø–∞ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞:\nID: {group_id}\n–ù–∞–∑–≤–∞–Ω–∏–µ: {existing.group_name}")
        return
    add_group(BotGroup(id=str(group_id), group_id=group_id, group_name=group_title))
    await update.effective_message.reply_text(f"‚úÖ –ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\nID: {group_id}\n–ù–∞–∑–≤–∞–Ω–∏–µ: {group_title}")

async def admin_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await request_admin_access(update, context):
        return ConversationHandler.END
    await update.effective_message.reply_text("–í–≤–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –æ—Ç —á–∞—Ç-–±–æ—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    return ADMIN_WAIT_TOKEN

async def admin_token(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not user:
        return ConversationHandler.END
    token_input = update.effective_message.text or ""
    bot_token = context.application.bot_data.get("admin_token")
    existing = get_user_by_user_id(user.id)
    if not existing:
        await update.effective_message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return ConversationHandler.END
    if token_input != bot_token:
        await update.effective_message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω!")
        return ConversationHandler.END
    update_user_admin(user.id, True)
    await update.effective_message.reply_text("–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã!")
    return ConversationHandler.END

async def admin_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.effective_message.reply_text("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!")
    return ConversationHandler.END

async def cb_build_apk_checklist_prod(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await request_access(update, context):
        return
    await update.effective_message.reply_text("–°–±–æ—Ä–∫–∞ APK Autolab - Checklist –¥–ª—è Prod-—Å—Ä–µ–¥—ã")
    keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("–°–∫–∞—á–∞—Ç—å", url="http://144.31.213.13/downloads/checklis_app/app-release.apk")]])
    await update.effective_message.reply_text("–°–∫–∞—á–∞–π—Ç–µ —Å–±–æ—Ä–∫—É APK Autolab - Checklist –¥–ª—è Prod-—Å—Ä–µ–¥—ã –ø–æ —Å—Å—ã–ª–∫–µ:", reply_markup=keyboard)

async def msg_echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.effective_message
    chat = update.effective_chat
    if not message or not message.text or not chat:
        return
    
    # –í –≥—Ä—É–ø–ø–∞—Ö –æ—Ç–≤–µ—á–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å –∫ –±–æ—Ç—É: —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ @username –∏–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    if chat.type in ("group", "supergroup"):
        addressed = False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
        if message.reply_to_message and message.reply_to_message.from_user and message.reply_to_message.from_user.id == context.bot.id:
            addressed = True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ username
        if not addressed:
            bot_username = context.bot.username
            if bot_username:
                if f"@{bot_username.lower()}" in message.text.lower():
                    addressed = True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º entities (—É–ø–æ–º–∏–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ @mention)
        if not addressed and message.entities:
            for entity in message.entities:
                if entity.type == "mention":
                    mentioned_username = message.text[entity.offset:entity.offset + entity.length]
                    bot_username = context.bot.username
                    if bot_username and mentioned_username.lower() == f"@{bot_username.lower()}":
                        addressed = True
                        break
        
        if not addressed:
            return
        
        # –í –≥—Ä—É–ø–ø–∞—Ö –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–æ—Å—Ç—É–ø–∞
        if not await request_access(update, context, is_replay=True):
            return
    else:
        # –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ —á–∞—Ç—ã ‚Äî –æ–±—ã—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ —Å –æ—Ç–≤–µ—Ç–æ–º
        if not await request_access(update, context, is_replay=True):
            return

    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    text = message.text
    bot_username = context.bot.username
    if bot_username:
        # –£–±–∏—Ä–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
        text = text.replace(f"@{bot_username}", "").strip()
    
    # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—É —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏
    try:
        matcher = get_command_matcher()
        match_result = matcher.match_command(text)
        
        if match_result:
            command, similarity = match_result
            logger.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {command} (—Å—Ö–æ–∂–µ—Å—Ç—å: {similarity:.2f})")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É
            if command == "/start":
                await cmd_start(update, context)
            elif command == "/help":
                await cmd_help(update, context)
            elif command == "/build":
                await cmd_build(update, context)
            elif command == "/register_group":
                await cmd_register_group(update, context)
            elif command == "/users":
                await cmd_users(update, context)
            elif command == "/groups":
                await cmd_groups(update, context)
            else:
                # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞, –Ω–æ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞
                await message.reply_text(f"–Ø –ø–æ–Ω—è–ª, —á—Ç–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É {command}, –Ω–æ –æ–Ω–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")
        else:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—É
            await message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {e}", exc_info=True)
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å–æ–æ–±—â–∞–µ–º –æ –Ω–µ–ø–æ–Ω–∏–º–∞–Ω–∏–∏
        await message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")

async def post_init(app: Application):
    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤
    await app.bot.set_my_commands([
        BotCommand("start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        BotCommand("help", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"),
        BotCommand("build", "–í—ã–±—Ä–∞—Ç—å —Å–±–æ—Ä–∫—É"),
        BotCommand("admin", "–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"),
        BotCommand("users", "üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (–∞–¥–º–∏–Ω)"),
        BotCommand("groups", "üë• –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø (–∞–¥–º–∏–Ω)"),
    ], scope=BotCommandScopeAllPrivateChats())
    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≥—Ä—É–ø–ø
    await app.bot.set_my_commands([
        BotCommand("start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        BotCommand("help", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"),
        BotCommand("build", "–í—ã–±—Ä–∞—Ç—å —Å–±–æ—Ä–∫—É"),
        BotCommand("register_group", "üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—É"),
    ], scope=BotCommandScopeAllGroupChats())


def run() -> None:
    load_dotenv()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        level=logging.INFO
    )
    
    token = os.getenv("BOT_TOKEN")
    if not token:
        raise RuntimeError("BOT_TOKEN not set")

    data_dir = os.path.join(os.getcwd(), "data")
    os.makedirs(data_dir, exist_ok=True)
    monty_dir = os.getenv("MONTYDB_DIR", os.path.join(data_dir, "monty"))
    os.makedirs(monty_dir, exist_ok=True)
    monty_db = os.getenv("MONTYDB_DB", "easybuild_bot")

    init_db(monty_dir, monty_db)

    app = Application.builder().token(token).post_init(post_init).build()
    app.bot_data["admin_token"] = token

    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("help", cmd_help))
    app.add_handler(CommandHandler("build", cmd_build))
    app.add_handler(CommandHandler("users", cmd_users))
    app.add_handler(CommandHandler("groups", cmd_groups))
    app.add_handler(CommandHandler("register_group", cmd_register_group))

    app.add_handler(CallbackQueryHandler(cb_allow_user, pattern=r"^allow_user_\d+$"))
    app.add_handler(CallbackQueryHandler(cb_build_apk_checklist_prod, pattern=r"^build_apk_checklist_prod$"))

    admin_conv = ConversationHandler(
        entry_points=[CommandHandler("admin", admin_start)],
        states={
            ADMIN_WAIT_TOKEN: [MessageHandler(filters.TEXT & (~filters.COMMAND), admin_token)]
        },
        fallbacks=[MessageHandler(filters.ALL, admin_cancel)],
        allow_reentry=True,
    )
    app.add_handler(admin_conv)

    # –≠—Ö–æ –¥–ª—è –ª—é–±—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤–Ω–µ –∫–æ–º–∞–Ω–¥ –∏ –≤–Ω–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), msg_echo))

    app.run_polling()
