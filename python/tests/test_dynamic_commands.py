#!/usr/bin/env python3
"""
Test script for dynamic command parameter extraction.
–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ –∫–æ–º–∞–Ω–¥.
"""

import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '../src'))

from easybuild_bot.commands.registry import CommandRegistry
from easybuild_bot.commands.implementations.unblock_user_command import UnblockUserCommand
from easybuild_bot.commands.implementations.block_user_command import BlockUserCommand
from easybuild_bot.commands.implementations.start_command import StartCommand
from easybuild_bot.commands.implementations.build_command import BuildCommand
from easybuild_bot.commands.implementations.users_command import UsersCommand
from easybuild_bot.storage import Storage


def test_dynamic_commands():
    """Test dynamic command recognition with parameter extraction."""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ —Å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\n")
    
    # Initialize storage (mock)
    storage = Storage(dir_path="/tmp/test_monty", db_name="test_db")
    admin_token = "test_token"
    
    # Initialize registry
    registry = CommandRegistry(model_name="cointegrated/rubert-tiny", threshold=0.5)
    
    # Register commands
    commands_to_register = [
        UnblockUserCommand(storage, admin_token),
        BlockUserCommand(storage, admin_token),
        StartCommand(storage, admin_token),
        BuildCommand(storage, admin_token),
        UsersCommand(storage, admin_token),
    ]
    
    for cmd in commands_to_register:
        registry.register(cmd)
    
    print(f"üìã –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –∫–æ–º–∞–Ω–¥: {len(commands_to_register)}\n")
    
    # Test cases
    test_cases = [
        # Unblock user commands - With "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" (different cases)
        "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ú–∏—Ä–æ—Å–ª–∞–≤–∞",  # genitive case
        "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ú–∏—Ä–æ—Å–ª–∞–≤–∞",  # dative case
        "–î–∞—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ò–≤–∞–Ω",          # genitive case
        "–î–∞—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ò–≤–∞–Ω",          # dative case (NEW!)
        "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ê–Ω–Ω–∞",  # genitive case
        "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ê–Ω–Ω–∞",  # dative case (NEW!)
        "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ü–µ—Ç—Ä",         # genitive case
        "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –û–ª—å–≥–∞",      # nominative case
        "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ò–≤–∞–Ω",      # instrumental case
        
        # Unblock user commands - With "—é–∑–µ—Ä–∞" (different cases)
        "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —é–∑–µ—Ä–∞ –ú–∏—Ä–æ—Å–ª–∞–≤–∞",         # genitive case
        "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —é–∑–µ—Ä—É –ú–∏—Ä–æ—Å–ª–∞–≤–∞",         # dative case (NEW!)
        "–î–∞—Ç—å –¥–æ—Å—Ç—É–ø —é–∑–µ—Ä –ò–≤–∞–Ω",                  # nominative case
        "–î–∞—Ç—å –¥–æ—Å—Ç—É–ø —é–∑–µ—Ä—É –ò–≤–∞–Ω",                 # dative case (NEW!)
        "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —é–∑–µ—Ä–∞ –û–ª—å–≥–∞",               # genitive case
        
        # Unblock user commands - WITHOUT "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" (name directly)
        "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ê–Ω–Ω—É",
        "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ú–∏—Ä–æ—Å–ª–∞–≤–∞",
        "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ò–≤–∞–Ω",
        "–í–∫–ª—é—á–∏—Ç—å –ü–µ—Ç—Ä",
        "–î–∞—Ç—å –¥–æ—Å—Ç—É–ø –û–ª—å–≥–∞",
        "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –ê–Ω–Ω–∞",
        
        # Block user commands - With "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" (different cases)
        "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ú–∏—Ä–æ—Å–ª–∞–≤–∞",   # genitive case
        "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –°–µ—Ä–≥–µ–π",      # dative case (NEW!)
        "–û—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –°–µ—Ä–≥–µ–π",          # genitive case
        "–û—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ê–ª–µ–∫—Å–∞–Ω–¥—Ä",       # dative case (NEW!)
        "–ó–∞–ø—Ä–µ—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ê–ª–µ–∫—Å–∞–Ω–¥—Ä",# genitive case
        "–ó–∞–ø—Ä–µ—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –í–ª–∞–¥–∏–º–∏—Ä", # dative case (NEW!)
        
        # Block user commands - With "—é–∑–µ—Ä–∞" (different cases)
        "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —é–∑–µ—Ä–∞ –î–º–∏—Ç—Ä–∏–π",            # genitive case
        "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —é–∑–µ—Ä—É –î–º–∏—Ç—Ä–∏–π",            # dative case (NEW!)
        "–û—Ç–∫–ª—é—á–∏—Ç—å —é–∑–µ—Ä –ï–ª–µ–Ω–∞",                   # nominative case
        "–û—Ç–∫–ª—é—á–∏—Ç—å —é–∑–µ—Ä—É –ï–ª–µ–Ω–∞",                  # dative case (NEW!)
        
        # Block user commands - WITHOUT "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" (name directly)
        "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –°–µ—Ä–≥–µ–π",
        "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –î–º–∏—Ç—Ä–∏—è",
        "–û—Ç–∫–ª—é—á–∏—Ç—å –ê–ª–µ–∫—Å–∞–Ω–¥—Ä",
        "–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ï–ª–µ–Ω–∞",
        "–ó–∞–ø—Ä–µ—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø –í–ª–∞–¥–∏–º–∏—Ä",
        
        # Edge cases
        "—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –º–∏—Ä–æ—Å–ª–∞–≤–∞",               # lowercase
        "—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–Ω—É",                    # lowercase without "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        "–†–ê–ó–ë–õ–û–ö–ò–†–û–í–ê–¢–¨ –í–õ–ê–î–ò–ú–ò–†",                # uppercase without "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        "–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∞–Ω–Ω–∞",  # dative case lowercase (NEW!)
        "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å",                         # no name
        
        # Existing commands (should still work)
        "–ü—Ä–∏–≤–µ—Ç",
        "–ø–æ–∫–∞–∂–∏ —Å–±–æ—Ä–∫–∏",
        "—Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
    ]
    
    for text in test_cases:
        print(f"üìù –¢–µ—Å—Ç: \"{text}\"")
        result = registry.match_command(text)
        
        if result:
            command, similarity, params = result
            print(f"  ‚úÖ –ö–æ–º–∞–Ω–¥–∞: {command.get_command_name()}")
            print(f"  üìä –°—Ö–æ–∂–µ—Å—Ç—å: {similarity:.3f}")
            if params:
                print(f"  üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
            else:
                print(f"  üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: –Ω–µ—Ç")
        else:
            print(f"  ‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞")
        print()

if __name__ == "__main__":
    test_dynamic_commands()

