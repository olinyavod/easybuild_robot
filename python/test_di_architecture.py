#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã DI.

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.
"""
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent / "src"))

def test_config():
    """–¢–µ—Å—Ç –∫–ª–∞—Å—Å–∞ Settings."""
    print("=" * 60)
    print("–¢–µ—Å—Ç 1: –ö–ª–∞—Å—Å Settings")
    print("=" * 60)
    
    try:
        from easybuild_bot.config import Settings
        
        # –°–æ–∑–¥–∞—ë–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∞
        settings = Settings(bot_token="test_token_123")
        
        print("‚úÖ Settings —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
        print("\n–ù–∞—Å—Ç—Ä–æ–π–∫–∏:")
        for key, value in settings.to_dict().items():
            print(f"  ‚Ä¢ {key}: {value}")
        
        print("\n‚úÖ to_dict() —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_di_structure():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞."""
    print("\n" + "=" * 60)
    print("–¢–µ—Å—Ç 2: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞")
    print("=" * 60)
    
    try:
        import easybuild_bot.di as di_module
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–±—Ä–∏—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        assert hasattr(di_module, 'create_speech_service'), "create_speech_service –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        assert hasattr(di_module, 'create_tts_service'), "create_tts_service –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        assert hasattr(di_module, 'Container'), "Container –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        
        print("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç:")
        print("  ‚Ä¢ create_speech_service")
        print("  ‚Ä¢ create_tts_service")
        print("  ‚Ä¢ Container")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_main_structure():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã main.py."""
    print("\n" + "=" * 60)
    print("–¢–µ—Å—Ç 3: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ main.py")
    print("=" * 60)
    
    try:
        # –ß–∏—Ç–∞–µ–º main.py
        main_path = Path(__file__).parent / "main.py"
        with open(main_path, 'r') as f:
            content = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        checks = [
            ("Settings", "from src.easybuild_bot.config import Settings" in content or "container.settings()" in content),
            ("Container", "from src.easybuild_bot.di import Container" in content),
            ("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π DI", "container.bot()" in content),
            ("load_dotenv", "load_dotenv()" in content),
        ]
        
        all_ok = True
        for name, check in checks:
            status = "‚úÖ" if check else "‚ùå"
            print(f"  {status} {name}")
            all_ok = all_ok and check
        
        if all_ok:
            print("\n‚úÖ main.py –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É")
        else:
            print("\n‚ö†Ô∏è main.py —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –∫–æ–¥–∞ (–±–µ–∑ –ø—É—Å—Ç—ã—Ö –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤)
        lines = [l.strip() for l in content.split('\n') if l.strip() and not l.strip().startswith('#')]
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ main.py:")
        print(f"  ‚Ä¢ –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: {len(lines)}")
        
        return all_ok
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_env_example():
    """–¢–µ—Å—Ç –Ω–∞–ª–∏—á–∏—è .env.example."""
    print("\n" + "=" * 60)
    print("–¢–µ—Å—Ç 4: –§–∞–π–ª .env.example")
    print("=" * 60)
    
    try:
        env_path = Path(__file__).parent / ".env.example"
        
        if not env_path.exists():
            print("‚ùå .env.example –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        with open(env_path, 'r') as f:
            content = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        required_params = [
            "BOT_TOKEN",
            "ADMIN_TOKEN",
            "WHISPER_MODEL",
            "TTS_SPEAKER",
            "COMMAND_MATCHER_MODEL",
        ]
        
        all_ok = True
        for param in required_params:
            present = param in content
            status = "‚úÖ" if present else "‚ùå"
            print(f"  {status} {param}")
            all_ok = all_ok and present
        
        if all_ok:
            print("\n‚úÖ .env.example —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
        
        return all_ok
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False


def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤."""
    print("\n" + "üöÄ" * 30)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–û–í–û–ô –ê–†–•–ò–¢–ï–ö–¢–£–†–´ DI")
    print("üöÄ" * 30 + "\n")
    
    results = []
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    results.append(("Settings", test_config()))
    results.append(("DI Container", test_di_structure()))
    results.append(("main.py", test_main_structure()))
    results.append((".env.example", test_env_example()))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
    print("\n" + "=" * 60)
    print("–ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢")
    print("=" * 60)
    
    for name, result in results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{status}: {name}")
    
    all_passed = all(r for _, r in results)
    
    print("\n" + "=" * 60)
    if all_passed:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("\n–ù–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:")
        print("  1. –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª: cp .env.example .env")
        print("  2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ BOT_TOKEN –≤ .env")
        print("  3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python main.py")
    else:
        print("‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–≤–æ–¥ –≤—ã—à–µ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π")
    print("=" * 60)
    
    return 0 if all_passed else 1


if __name__ == "__main__":
    sys.exit(main())

